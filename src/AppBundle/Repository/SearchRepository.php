<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

/**
 * SearchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SearchRepository extends EntityRepository
{
    /**
     * @param int $start
     * @param int $limit
     *
     * @return QueryBuilder
     */
    protected function baseMostSearchedQuery($start = 0, $limit = 0)
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->select('a.title')
            ->addSelect('a.description')
            ->addSelect('a.slug')
            ->leftJoin('s.answer', 'a')
            ->addSelect('COUNT(a.id) as countId')
            ->groupBy('s.answer')
            ->orderBy('countId', 'DESC');

        if ($limit > 0) {
            $qb->setMaxResults($limit);

            if ($start > 0) {
                $qb->setFirstResult($start);
            }
        }

        return $qb;
    }


    /**
     * @param int $start
     * @param int $limit
     *
     * @return Query
     */
    public function findMostSearchedQuery($start = 0, $limit = 0)
    {
        $qb = $this->baseMostSearchedQuery($start, $limit);

        $query = $qb->getQuery();
        $query->useQueryCache(true);

        return $query;
    }


    /**
     * @param User $user
     * @param int  $start
     * @param int  $limit
     *
     * @return Query
     */
    public function findMostSearchedByUserQuery(User $user, $start = 0, $limit = 0)
    {
        $qb = $this->baseMostSearchedQuery($start, $limit);
        $qb
            ->andWhere($qb->expr()->eq('s.user', ':user'))
            ->setParameter('user', $user);

        $query = $qb->getQuery();
        $query->useQueryCache(true);

        return $query;
    }
}
